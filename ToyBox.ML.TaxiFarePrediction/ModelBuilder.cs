// This file was auto-generated by ML.NET Model Builder.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using ToyBox.ML.TaxiFarePrediction.Model;

namespace ToyBox.ML.TaxiFarePrediction
{
    public class ModelBuilder : IModelBuilder
    {
        private string trainDataFilePath;
        private string modelFilePath;

        // Create MLContext to be shared across the model creation workflow objects
        // Set a random seed for repeatable/deterministic results across multiple trainings.
        private MLContext mlContext = new MLContext(seed: 1);

        public MLContext MlContext { get => mlContext; set => mlContext = value; }
        public string TrainDataFilePath { get => trainDataFilePath; set => trainDataFilePath = value; }
        public string ModelFilePath { get => modelFilePath; set => modelFilePath = value; }

        public void CreateModel()
        {
            trainDataFilePath = IModelBuilder.GetFilePath();
            modelFilePath = IModelBuilder.SetFilePath();
            // Load Data
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: trainDataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);

            // Train Model
            ITransformer mlModel = TrainModel(mlContext, trainingDataView, trainingPipeline);

            // Evaluate quality of Model
            IModelBuilder.Evaluate(mlContext, trainingDataView, trainingPipeline);

            // Save model
            IModelBuilder.SaveModel(mlContext, mlModel, modelFilePath, trainingDataView.Schema);
        }

        public IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var dataProcessPipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair("vendor_id", "vendor_id"), new InputOutputColumnPair("payment_type", "payment_type") })
                                      .Append(mlContext.Transforms.Concatenate("Features", new[] { "vendor_id", "payment_type", "rate_code", "passenger_count", "trip_distance" }));
            // Set the training algorithm
            var trainer = mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options() { NumberOfIterations = 100, LearningRate = 0.0677866f, NumberOfLeaves = 43, MinimumExampleCountPerLeaf = 1, UseCategoricalSplit = false, HandleMissingValue = false, UseZeroAsMissingValue = true, MinimumExampleCountPerGroup = 50, MaximumCategoricalSplitPointCount = 32, CategoricalSmoothing = 20, L2CategoricalRegularization = 10, Booster = new GradientBooster.Options() { L2Regularization = 0.5, L1Regularization = 1 }, LabelColumnName = "fare_amount", FeatureColumnName = "Features" });

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            return trainingPipeline;
        }

        public ITransformer TrainModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            Console.WriteLine("=============== Training  model ===============");

            ITransformer model = trainingPipeline.Fit(trainingDataView);

            Console.WriteLine("=============== End of training process ===============");
            return model;
        }
    }
}